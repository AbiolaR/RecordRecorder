<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"                    
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
                    xmlns:local="clr-namespace:RecordRecorder"      
                    xmlns:core="clr-namespace:Record.Recorder.Core;assembly=Record.Recorder.Core">
    
    <ResourceDictionary.MergedDictionaries>
        <!-- The order is important -->
        <ResourceDictionary Source="Colors.xaml" />
        <ResourceDictionary Source="Fonts.xaml" />
        <ResourceDictionary Source="Texts.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Hoverless Button -->
    <Style TargetType="{x:Type Button}" x:Key="Hoverless">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Application Standard Button -->
    <Style TargetType="Button" x:Key="AppStandardButton">
        <Setter Property="Background" Value="#FF5F96" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="TextElement.FontFamily" Value="{StaticResource FocoBold}"/>
        <Setter Property="TextElement.FontSize" Value="20"/>
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="10" Background="{TemplateBinding Background}" BorderBrush="#ccc" BorderThickness="0" >
                        <ContentPresenter Name="Border" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="LightGray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Toggle Button, part of a pair -->
    <Style TargetType="Button" x:Key="PairToggleButton" BasedOn="{StaticResource AppStandardButton}">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Height" Value="35" />
        <Setter Property="Width" Value="85" />
        <Setter Property="Margin" Value="10 30 10 10" />
        <Setter Property="local:IsSelectedProperty.Value" Value="True" />
        <Setter Property="Opacity" Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:IsSelectedProperty.Value) , Converter={local:BooleanIsSelectedToFloatConverter}}" />
        <Setter Property="Cursor" Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:IsSelectedProperty.Value) , Converter={local:BooleanIsSelectedToCursorConverter}}" />

    </Style>

    <!-- Dialog Control Button -->
    <Style TargetType="Button" x:Key="DialogControlButton" BasedOn="{StaticResource AppStandardButton}" >
        <Setter Property="TextElement.FontSize" Value="16" />
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="MinWidth" Value="70" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Command" Value="{Binding CloseCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:BaseDialogUserControl}}}" />
    </Style>

    <!-- Dialog OK Button -->
    <Style TargetType="Button" x:Key="DialogOkButton" BasedOn="{StaticResource DialogControlButton}" >
    </Style>

    <!-- Specific Test Recording Device Toggle Button -->
    <Style TargetType="Button" x:Key="TestDeviceToggleButton" BasedOn="{StaticResource AppStandardButton}">
        <Setter Property="Background" Value="#FF5F96" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="TextElement.FontSize" Value="20"/>
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="TextElement.FontFamily" Value="{StaticResource Foco}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border CornerRadius="10"
                            BorderBrush="#ccc"
                            BorderThickness="0"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <Grid>
                            <TextBlock Text="{TemplateBinding Content}"                                    
                                   Visibility="{Binding IsTestingRecordingDevice, Converter={local:BooleanToVisibilityConverter}, ConverterParameter=True}"
                                   Focusable="False" 
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                   Margin="{TemplateBinding Padding}" 
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                            <TextBlock Text="{x:Static core:Text.Stop}" 
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Visibility="{Binding IsTestingRecordingDevice, Converter={local:BooleanToVisibilityConverter}}"
                                   />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsTestingRecordingDevice}" Value="True">
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="beginPulsating">
                        <Storyboard>
                            <DoubleAnimation                
                                Storyboard.TargetProperty="Opacity"
                                From="1"
                                To=".5"
                                Duration="0:0:1"
                                AutoReverse="True"
                                RepeatBehavior="Forever" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="beginPulsating" />
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Specific Play Pause Toggle Button -->
    <Style TargetType="Button" x:Key="PlayToggleButton" BasedOn="{StaticResource AppStandardButton}">
        <Setter Property="Background" Value="#FF5F96" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="TextElement.FontSize" Value="20"/>
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="TextElement.FontFamily" Value="{StaticResource Foco}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border CornerRadius="10"
                            BorderBrush="#ccc"
                            BorderThickness="0"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <Grid>
                            <TextBlock Text="{TemplateBinding Content}"                                    
                                   Visibility="{Binding IsRecording, Converter={local:BooleanToVisibilityConverter}}"
                                   Focusable="False" 
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                   Margin="{TemplateBinding Padding}" 
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                            <TextBlock Text="{x:Static core:Text.Continue}" 
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Visibility="{Binding IsRecording, Converter={local:BooleanToVisibilityConverter}, ConverterParameter=True}"
                                   />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Specific Recording Button -->
    <Style TargetType="Button" x:Key="RecordingButton" BasedOn="{StaticResource AppStandardButton}">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="200" />
        <Setter Property="Visibility" Value="{Binding IsRecordingInProgress, Converter={local:BooleanToVisibilityConverter}, ConverterParameter=True}" />

        <Style.Triggers>
            <DataTrigger Binding="{Binding IsRecordingAllowed}" Value="True">
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="expandButton">
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(Button.Width)"
                                To="250"
                                Duration="0:0:.5"
                                RepeatBehavior="1x"
                                FillBehavior="Stop"                    
                                />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Specific Save Recording Button -->
    <Style TargetType="Button" x:Key="SaveRecordingButton" BasedOn="{StaticResource AppStandardButton}">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="200" />
        <Setter Property="Visibility" Value="{Binding IsRecordingInProgress, Converter={local:BooleanToVisibilityConverter}, ConverterParameter=True}" />


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border CornerRadius="10"
                            BorderBrush="#ccc"
                            BorderThickness="0"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <Grid>
                            <TextBlock Text="{TemplateBinding Content}"                                    
                                   Visibility="{Binding IsRecordingSaved, Converter={local:BooleanToVisibilityConverter}}"
                                   Focusable="False" 
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                   Margin="{TemplateBinding Padding}" 
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                            <TextBlock Text="{x:Static core:Text.Save}" 
                                   Visibility="{Binding IsRecordingSaved, Converter={local:BooleanToVisibilityConverter}, ConverterParameter=True}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding IsRecordingAllowed}" Value="True">
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="expandButton">
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(Button.Width)"
                                To="250"
                                Duration="0:0:.5"
                                RepeatBehavior="1x"
                                FillBehavior="Stop"                    
                                />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Navigational Button -->
    <!-- for switching either to the Home or Settings Page -->
    <Style TargetType="Button" x:Key="NavButton" BasedOn="{StaticResource AppStandardButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Width" Value="20" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Panel.ZIndex" Value="1" />
    </Style>
    
    <!-- System Icon Button -->
    <Style TargetType="{x:Type Button}" x:Key="SystemIconButton" BasedOn="{StaticResource Hoverless}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Padding" Value="2" />
    </Style>

    <!-- Window Control Button -->
    <Style TargetType="Button" x:Key="WindowControlButton" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="Foreground" Value="{DynamicResource ApplicationTextBrush}" />
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1.5" />
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="LightGray" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    
    <!-- Window Close Button -->
    <Style TargetType="{x:Type Button}" x:Key="WindowCloseButton" BasedOn="{StaticResource WindowControlButton}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="IndianRed" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>
   
</ResourceDictionary>